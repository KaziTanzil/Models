# -*- coding: utf-8 -*-
"""Copy of Xception.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rVRS5APXz34xA7YPHsJZX75pibAAWwrf

**Step 1: Upload the Dataset**
"""

from google.colab import files
uploaded = files.upload()

"""**Step 2: Unzip the Dataset**"""

import zipfile
import os

# Unzip the dataset
with zipfile.ZipFile('skin-disease-datasaet.zip', 'r') as zip_ref:
    zip_ref.extractall('skin-disease-datasaet')

# Verify the dataset structure
dataset_dir = 'skin-disease-datasaet'
print(os.listdir(dataset_dir))

"""**Step 3: Install Required Libraries**"""

!pip install tensorflow==2.12 keras==2.12

"""**Step 4: Import Required Libraries**"""

import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import Xception
from tensorflow.keras import layers, models
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

"""**Step 5: Define Directory Paths**"""

# Define the base directory for dataset
base_dir = '/content/skin-disease-datasaet/skin-disease-datasaet'

train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'validation')
test_dir = os.path.join(base_dir, 'test')

"""**Step 6: Explore the Dataset**"""

def count_images(directory):
    return {subdir: len(os.listdir(os.path.join(directory, subdir))) for subdir in os.listdir(directory)}

print('Train set:', count_images(train_dir))
print('Validation set:', count_images(validation_dir))
print('Test set:', count_images(test_dir))

"""**Step 7: Set Up Image Data Generators**"""

# Data Augmentation for the training set
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

# No data augmentation for validation/test sets
validation_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

# Create generators
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(299, 299),  # Xception input size
    batch_size=32,
    class_mode='categorical'
)

validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(299, 299),
    batch_size=32,
    class_mode='categorical'
)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(299, 299),
    batch_size=32,
    class_mode='categorical',
    shuffle=False
)

"""**Step 8: Load the NASNetLarge Model with Pretrained Weights**"""

# Load the Xception model without the top (fully connected) layers
xception_base = Xception(weights='imagenet', include_top=False, input_shape=(299, 299, 3))

# Freeze the base model layers
for layer in xception_base.layers:
    layer.trainable = False

# Add custom layers on top of the Xception base
model = models.Sequential()
model.add(xception_base)
model.add(layers.GlobalAveragePooling2D())
model.add(layers.Dense(512, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(train_generator.num_classes, activation='softmax'))

# Compile the model with AUC score
model.compile(optimizer=Adam(learning_rate=1e-4),
              loss='categorical_crossentropy',
              metrics=['accuracy', 'AUC', 'Precision', 'Recall'])

# Print the model summary
model.summary()

"""**Step 9: Train the Model**"""

history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    epochs=20,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // validation_generator.batch_size
)

"""**Step 10: Evaluate the Model on the Test Set**"""

test_steps = test_generator.samples // test_generator.batch_size
test_loss, test_accuracy, test_auc, test_precision, test_recall = model.evaluate(test_generator, steps=test_steps)

print(f"Test Loss: {test_loss}")
print(f"Test Accuracy: {test_accuracy}")
print(f"Test AUC: {test_auc}")
print(f"Test Precision: {test_precision}")
print(f"Test Recall: {test_recall}")

"""**Step 11: Visualize Training History**"""

import matplotlib.pyplot as plt

def plot_training_history(history):
    # Set up subplots for accuracy, loss, precision, recall, and AUC
    plt.figure(figsize=(16, 8))

    # Plotting accuracy
    plt.subplot(2, 3, 1)
    plt.plot(history.history['accuracy'], label='Training Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.title('Model Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()

    # Plotting loss
    plt.subplot(2, 3, 2)
    plt.plot(history.history['loss'], label='Training Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.title('Model Loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()

    # Plotting precision
    plt.subplot(2, 3, 3)
    plt.plot(history.history['precision'], label='Training Precision')
    plt.plot(history.history['val_precision'], label='Validation Precision')
    plt.title('Model Precision')
    plt.xlabel('Epochs')
    plt.ylabel('Precision')
    plt.legend()

    # Plotting recall
    plt.subplot(2, 3, 4)
    plt.plot(history.history['recall'], label='Training Recall')
    plt.plot(history.history['val_recall'], label='Validation Recall')
    plt.title('Model Recall')
    plt.xlabel('Epochs')
    plt.ylabel('Recall')
    plt.legend()

    # Plotting AUC
    plt.subplot(2, 3, 5)
    plt.plot(history.history['auc'], label='Training AUC')
    plt.plot(history.history['val_auc'], label='Validation AUC')
    plt.title('Model AUC')
    plt.xlabel('Epochs')
    plt.ylabel('AUC')
    plt.legend()

    # Adjust layout and display
    plt.tight_layout()
    plt.show()

# Call the function to plot
plot_training_history(history)

"""**Step 12: Generate Predictions and Classification Report**"""

# Predict classes
predictions = model.predict(test_generator)
predicted_classes = np.argmax(predictions, axis=1)

# True classes
true_classes = test_generator.classes

# Generate classification report
print(classification_report(true_classes, predicted_classes, target_names=test_generator.class_indices.keys()))

"""**Step 13: Save the Model**"""

model.save('Xception_skin_disease_model.h5')
# -*- coding: utf-8 -*-
"""Copy of MobileNetV2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UHiRLGp5jk25CUVCL0Bfj3yFJdvCw2c7

**1.Upload and Unzip the Dataset**
"""

from google.colab import files
uploaded = files.upload()

import zipfile
import os

# Unzip the dataset
with zipfile.ZipFile('skin-disease-datasaet.zip', 'r') as zip_ref:
    zip_ref.extractall('skin-disease-datasaet')

# Verify the dataset structure
dataset_dir = 'skin-disease-datasaet'
print(os.listdir(dataset_dir))

"""**2.Import Required Libraries**"""

!pip install tensorflow keras numpy matplotlib scikit-learn

import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import layers, models
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import classification_report, confusion_matrix
from tensorflow.keras.models import Model
from tensorflow.keras.metrics import AUC, Precision, Recall

"""**3.Define Directory Paths**"""

base_dir = '/content/skin-disease-datasaet/skin-disease-datasaet'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'validation')
test_dir = os.path.join(base_dir, 'test')

"""**4.Explore the Dataset**"""

def count_images(directory):
    return {subdir: len(os.listdir(os.path.join(directory, subdir))) for subdir in os.listdir(directory)}

print('Train set:', count_images(train_dir))
print('Validation set:', count_images(validation_dir))
print('Test set:', count_images(test_dir))

"""**5.Set Up Image Data Generators**"""

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

validation_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    shuffle=False
)

"""**6.Build the MobileNetV2 Model**"""

import tensorflow as tf
print(tf.__version__)

from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model

# Define the input shape
input_tensor = Input(shape=(224, 224, 3))

# Load the MobileNetV2 model with specified parameters
mobilenet_base = MobileNetV2(weights='imagenet', include_top=False, input_tensor=input_tensor)

# Freeze the base model layers
for layer in mobilenet_base.layers:
    layer.trainable = False

# Add custom layers
x = layers.GlobalAveragePooling2D()(mobilenet_base.output)
x = layers.Dense(512, activation='relu')(x)
x = layers.Dropout(0.5)(x)
output_tensor = layers.Dense(train_generator.num_classes, activation='softmax')(x)

# Create the model
model = Model(inputs=input_tensor, outputs=output_tensor)

# Compile the model
model.compile(optimizer=Adam(learning_rate=1e-4),
              loss='categorical_crossentropy',
              metrics=['accuracy', AUC(name='auc'), Precision(name='precision'), Recall(name='recall')])

# Display the model summary
model.summary()

"""**7. Train the Model**"""

history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // validation_generator.batch_size,
    epochs=10  # Adjust as needed
)

"""**8. Evaluate the Model and Calculate Metrics**

8.1. First, create a test generator and evaluate the model.
"""

# Evaluate the model on the test set
results = model.evaluate(test_generator)

# Unpack the results based on the metrics you have defined
test_loss, test_accuracy, test_auc, test_precision, test_recall = results

# Print the results
print(f'Test Loss: {test_loss}')
print(f'Test Accuracy: {test_accuracy}')
print(f'Test AUC: {test_auc}')
print(f'Test Precision: {test_precision}')
print(f'Test Recall: {test_recall}')

"""8.2. calculate precision, recall, F1 score, and generate a classification report."""

# Get the true labels and predictions
Y_true = test_generator.classes
Y_pred = model.predict(test_generator)
Y_pred_classes = np.argmax(Y_pred, axis=1)

# Generate confusion matrix and classification report
conf_matrix = confusion_matrix(Y_true, Y_pred_classes)
print('Confusion Matrix:')
print(conf_matrix)

# Classification report
target_names = list(test_generator.class_indices.keys())
classification_rep = classification_report(Y_true, Y_pred_classes, target_names=target_names)
print('Classification Report:')
print(classification_rep)

"""**9. Visualize Training History**"""

plt.figure(figsize=(18, 12))

# Accuracy
plt.subplot(2, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# AUC
plt.subplot(2, 2, 2)
plt.plot(history.history['auc'], label='Train AUC')
plt.plot(history.history['val_auc'], label='Validation AUC')
plt.title('Model AUC')
plt.xlabel('Epoch')
plt.ylabel('AUC')
plt.legend()

# Precision
plt.subplot(2, 2, 3)
plt.plot(history.history['precision'], label='Train Precision')
plt.plot(history.history['val_precision'], label='Validation Precision')
plt.title('Model Precision')
plt.xlabel('Epoch')
plt.ylabel('Precision')
plt.legend()

# Recall
plt.subplot(2, 2, 4)
plt.plot(history.history['recall'], label='Train Recall')
plt.plot(history.history['val_recall'], label='Validation Recall')
plt.title('Model Recall')
plt.xlabel('Epoch')
plt.ylabel('Recall')
plt.legend()

plt.tight_layout()
plt.show()

"""**10. Save the Model**"""

model.save('skin_disease_classifier_mobilenetv2.h5')